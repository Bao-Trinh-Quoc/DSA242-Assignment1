################ a place for me to save my code #################

CHECK LEAK: valgrind --leak-check=full --show-leak-kinds=all ./main

03/03/2024
done ArrayList. <--- now try to understand the code better.

DeleteUserData: 
A function pointer to a custom function for deleting user data, 
useful when the elements are pointers to dynamically allocated objects.

itemEqual: 
A function pointer to a custom function for comparing elements,
useful when the default comparison is not appropriate.


XArrayList<Point*> pointList(deletePoint, comparePoints); <--- ohhhhhh


04/03/2025
begin to implement DLinkedList
ok xong DLinkedList it nhat thi gio da co khaong 60% btl1

05/03/2025
I have some proposed changes in clear().
design wise now clear() will remove even dummy nodes.
not yet apply to this src code tho.

i probably will start code some of 1D list functions today. but man
i got lab to do

06/03/2025
Lets start 1D list functions
rightnow i will implement 1D list using XArrayList, there is no clear
answer which to use tho. just use what i think is good for this. 
will fix later if needed.

there is something like this in inventoryManager
 Note: You should implement this method with O(n2) time complexity to fully passed all
 the testcase.

implement constructor for 1D

The key insight is that in C++, the get(index) method in both XArrayList 
and DLinkedList returns a reference (T&), 
which means you can directly assign to the returned value to 
modify the element in the list. 
This is a common pattern in C++ container classes,
which allows for efficient modification of elements.

define operator<< of 1D list in class itself bcs:
This ensures that the compiler correctly associates the friend function with each template 
instantiation of the List1D class. The issue is that when you declare 
a non-template friend in a template class, it becomes a single function 
that tries to work with all template instantiations, which isn't possible.


10/03/2025

Updated DLinkedList.h: add instructor's implementation of class BWDIterator

hmm i think using DLinkedList is better for 2D List.

The string representation of List1D and List2D includes spaces. 
The description will be updated in v1.1.

ok learnt a bit of valgrind ig.


pretty weird thing to consider set in List1D 
what if index > this->size() ?? should i use add or throw exception?
I still think I need to throw exception.

btw we had sample code for XArrayList and DLinkedList so I can use that to test my code if needed.

tested my XArrayList in the testcase code tho and it passed.
probably will read both of the code to reflex later.

11/03/2025

just remember deadline for this assigment is 28/03 so I got three weeks left.

QUESTION: DO i need to validate the input in inventoryManager


holy the errors:
messing around with the errors in Inventory manager 

List1D<InventoryAttribute> InventoryManager::getProductAttributes(int index) const
{
    // TODO
    if (index < 0 || index >= this->size()) {
        throw out_of_range("Index is invalid!");
    }
    return this->attributesMatrix.getRow(index); <--- problem

}

temprorary fix it by changes InventoryAttribute

12/03/2025
this is interesting:
    // template <typename U> //! thêm vào  để chạy test 
    // define in the class to avoid warning
    // friend ostream &operator<<(ostream &os, const List1D<T> &list);
    friend ostream &operator<<(ostream &os, const List1D<T> &list) {
        return os << list.toString();
    }

either I define it in the class or outside the class with template<typename T>

wait i realize i made mistake but it still compile in the main code lol

ok I guess I need to fix a lot of List2D

ok the setRow methods got complicated if i reconsider the cases

hard truth even though i can code but still need a lot of time to understand it right 

update the code to pass the unittest but still got a lot to fix I suppose :(.)

14/03/2025

hmm I wonder can i change the InventoryAttribute?

Implement Add and Remove product in InventoryManager

changed attributeName from int to string according to the instruction (v1.1)

probably left query for later because the information is unclear now.
hmm actually think that i will implement simple one to test instead of do heavy lifting rn.

ok seems like i ran into the full debug mode add everything now :).

the problem is at destructor of list1D list2D afaik.
wow debug is pretty fun ngl.

tam thoi xoa cai destructor ko can thiet kia di.



o1 --- add operator in list1D and list2D fix the error wow!!

15/03/2025

ok today will refine the code yesterday and try to implement remaining function;
welp if i want to implement query fucntin i probably need to add my own testcase rn.

okay implement the basic query function that passes my testcases. (and no leak:)
Implement the removeDuplicates and pass the testcase
one thing that I concern rightnow is time complexity of that function.

Initialization:
Creating a boolean list of size n: O(n)

Main nested loops:
Outer loop: Iterates through all products (n iterations)
Inner loop: For each product i, compares with all subsequent products (n-i-1 iterations)
This creates a classic O(n²) pattern: n + (n-1) + (n-2) + ... + 1 = n(n+1)/2 which is O(n²)

Attribute comparison:
For each product pair, there's another loop that compares all attributes
If m is the maximum number of attributes per product, this adds O(m) work inside the nested loops
Since m is typically much smaller than n and independent of n, it doesn't change the overall complexity

Removal phase:
Iterating backward through the list once to remove marked products: O(n)
Each removal operation could be O(n) itself due to shifting elements, but since we're removing from the end, we minimize this cost

"Since m is typically much smaller than n" <--- cannot trust this statement tho.

completed all required functions in InventoryManager POG~~~


18/03/2025

Fixed critical errors holy

clear don't set capacity and don';t use memmove anymore because it too risky

fix error in ensureCapacity XArrayList

21/03/2025

detect that cannot even use ceil :). but in my codespace i can use this ?
changed from use ceil to implement my own ceil logic.

oh my god my health man ;).

welp its all about format error :).

changed the format of toString method of Inventory to pass the testcases in lms.
If needed, we will revert.

now I will try to pass random test3 and 4 then submit again
it's about List1D and List2D

problems at list1D:
 * set method 
template <typename T>
void List1D<T>::set(int index, T value)
{
    // TODO
    if (index < 0 || index >= this->pList->size()) {
        throw out_of_range("Index is out of range!");
    }
    
    // get() returns a reference so I can directly set the value
    this->pList->get(index) = value;
}

seems like reuse get is pretty bad.

hmm what if index = the size of the list do i treat set as an add method or throw exception?

wow so I will need to discuss more before I decide to change this or not.

7:55pm:
just realize in merge function i don't need to resolve the duplicates (as the instruction said)
so i will remove that part. and probably submit again

22/03/2025
6:26am: ok the TA_VT "quay xe" va nghi lai ve ham clear.
Minh cung xem lai ham clear trong XArrayList roi no set count = 0 va set lai capacity ve gia tri mac dinh ban dau
y het trong lop lab.
De sua lai.

probably need to rethink about ensureCapacity
maybe change the amount of it to 1.5 and fix like the instructor said.

8:01pm: ok change the to String like the original 

25/03/2025

4:07pm: ok, found out that when its empty the toString() in inventoryManager got it worng.
just test with a test about query and i think the expected output is pretty flaw.

5:08pm: ok the problem about precision is pretty tricky and fun

ok i guess i solved it for now
changed from this // int section1Size = (this->size() * ratio) == static_cast<int>(this->size() * ratio) 
    //                ? static_cast<int>(this->size() * ratio) 
    //                : static_cast<int>(this->size() * ratio) + 1;

to the whole bunch in split method 
I think the problem in the old method is the comparision == when i static_cast<int> the value.

I passed almost every testcases about InventoryManager. The only one problem rn
lies in the query function. 

26/03/2025
This day will be for review my whole code and fix bugs if needed.

ok the query is even sorted by the quantity ---> this is new information for me.
I will wait one day to see if the instructos can confirm this.

ok I just see the instructor mention about quantity so i updated my query function
8:00pm: updated the query function

27/03/2025

Ok When ascending = true, the preceding product remains in front (if other attributes are equal), 
so when ascending = false, the opposite applies.

28/03/2025
review the source code and make sure everything is ok
ok done the  review part.